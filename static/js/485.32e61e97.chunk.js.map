{"version":3,"file":"static/js/485.32e61e97.chunk.js","mappings":"0KACA,G,QAAkC,kCAAlC,EAAyF,qCAAzF,EAA8I,+BAA9I,EAAoM,sCAApM,EAA8P,mCAA9P,EAAsT,oCAAtT,EAAiX,sCAAjX,EAAwa,gCAAxa,EAA8d,qCCA9d,EAAiC,+BAAjC,EAAyE,uBAAzE,EAAmH,iCAAnH,EAA+K,yCAA/K,EAAsO,4BAAtO,EAAqR,iCAArR,EAA2U,mC,6BCW9TA,EAAS,SAACC,GACnB,OACI,SAAC,KAAD,CAASC,GAAI,YAAcD,EAAME,GAAIC,gBAAiBC,EAAtD,UACI,iBAAKC,UAAWD,EAAhB,WACI,gBAAKC,UAAWD,EAAhB,UACI,gBAAKE,IAAKC,OAEd,iBAAKF,UAAWD,EAAhB,WACI,iBAAKC,UAAWD,EAAhB,UACKJ,EAAMQ,KADX,IACkBR,EAAMS,aAExB,gBAAKJ,UAAWD,EAAhB,SACKJ,EAAMU,YAEX,gBAAKL,UAAWD,EAAhB,UACI,8GC1BxB,EAAkC,iCAAlC,EAAuF,mCAAvF,EAAmI,wBAAnI,EAAuL,2CAAvL,EAAiP,8BAAjP,EAAmS,mCAAnS,EAA4V,qCCY/UO,EAAU,SAACX,GACpB,OACI,SAAC,KAAD,CAASC,GAAI,YAAYD,EAAME,GAA/B,UACI,iBAAKG,UAAWD,EAAhB,WACI,gBAAKC,UAAWD,EAAhB,UACG,gBAAKE,IAAKC,OAEb,gBAAKF,UAAWD,KAGhB,iBAAKC,UAAWD,EAAhB,WACI,iBAAKC,UAAWD,EAAhB,UACKJ,EAAMQ,KADX,IACkBR,EAAMS,aAExB,gBAAKJ,UAAWD,EAAhB,SACKJ,EAAMU,YAEX,gBAAKL,UAAWD,EAAhB,UACI,uBACKJ,EAAMY,qB,6BCAnC,GAL2BC,E,QAAAA,IACvBC,EAAAA,GACAC,EAAAA,EAAAA,KAXoB,SAACC,GACrB,MAAM,CACFC,eAAeD,EAAME,YAAYD,eACjCE,QAAQH,EAAME,YAAYC,QAC1BC,SAASJ,EAAME,YAAYE,SAC3BC,OAAOL,EAAMM,KAAKD,UAMG,CAACE,YAAAA,EAAAA,GAAYC,qBAAAA,EAAAA,KAFfX,ECTJ,SAACb,GAUpB,OACI,iBAAKK,UAAWD,EAAhB,WACI,iBAAKC,UAAWD,EAAhB,WACI,eAAIC,UAAWD,EAAf,uBAEA,kBAAOqB,WAAOC,EACNC,SAAU,aACVC,YAAY,uBACpB,SAACC,EAAA,EAAD,CAAQC,MAAO,gBAAiBC,SAAU,aAAQ1B,UAAWD,QAEjE,gBAAKC,UAAWD,EAAhB,SAEQJ,EAAMmB,QAAQa,KAAI,SAAAC,GAAM,OAAI,SAAClC,EAAD,CAExBG,GAAI+B,EAAO/B,GAAIM,KAAMyB,EAAOzB,KAC5BC,SAAUwB,EAAOxB,SACjBC,SAAUuB,EAAOvB,UAHZuB,EAAO/B,UAKxB,iBAAKG,UAAWD,EAAhB,WACI,iBAAKC,UAAWD,EAAhB,WACI,kBAAOC,UAAWD,EACXqB,MAAOzB,EAAMiB,eACbU,SA9BC,SAACO,GACjBlC,EAAMwB,qBAAqBU,EAAEC,cAAcV,QA8B/BG,YAAY,qBAChB,SAACC,EAAA,EAAD,CAAQC,MAAO,eAAgBC,SA5B3B,WAChB/B,EAAMuB,eA2B4DlB,UAAWD,OAIjEJ,EAAMoB,SAASY,KAAI,SAAApB,GAAO,OAAI,SAACD,EAAD,CAE1BH,KAAMI,EAAQJ,KACdC,SAAUG,EAAQH,SAAUC,SAAUE,EAAQF,SAC9CR,GAAIU,EAAQV,GAAIU,QAASA,EAAQA,SAH5BA,EAAQV","sources":["webpack://samurai-way/./src/components/Content/Dialogs/Dialogs.module.css?5cdb","webpack://samurai-way/./src/components/Content/Dialogs/Dialog/Dialog.module.css?9684","components/Content/Dialogs/Dialog/Dialog.tsx","webpack://samurai-way/./src/components/Content/Dialogs/Message/Message.module.css?b6c4","components/Content/Dialogs/Message/Message.tsx","components/Content/Dialogs/DialogsContainer.tsx","components/Content/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs_wrapper\":\"Dialogs_dialogs_wrapper__p31Kl\",\"dialogs_description\":\"Dialogs_dialogs_description__wc-UA\",\"dialogs_title\":\"Dialogs_dialogs_title__CMLQ2\",\"search_dialog_button\":\"Dialogs_search_dialog_button__KTmGq\",\"dialogs_container\":\"Dialogs_dialogs_container__0xeys\",\"messages_container\":\"Dialogs_messages_container__3-F6v\",\"messages_description\":\"Dialogs_messages_description__agWGB\",\"messages_input\":\"Dialogs_messages_input__30LsV\",\"send_message_button\":\"Dialogs_send_message_button__op28p\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog_wrapper\":\"Dialog_dialog_wrapper__FIloh\",\"active\":\"Dialog_active__vvk3B\",\"dialog_ava_block\":\"Dialog_dialog_ava_block__P2ccO\",\"dialog_description_block\":\"Dialog_dialog_description_block__Lq7po\",\"dialog_name\":\"Dialog_dialog_name__bGvCk\",\"dialog_last_data\":\"Dialog_dialog_last_data__qJXqE\",\"dialog_description\":\"Dialog_dialog_description__4VnHr\"};","import React from 'react';\r\nimport styles from './Dialog.module.css';\r\nimport dialogAva from './../../../../asets/user_logo.png';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport type DialogType = {\r\n    id: number;\r\n    name: string;\r\n    lastName: string;\r\n    lastData: string;\r\n}\r\n\r\nexport const Dialog = (props: DialogType) => {\r\n    return (\r\n        <NavLink to={'/dialogs/' + props.id} activeClassName={styles.active}>\r\n            <div className={styles.dialog_wrapper}>\r\n                <div className={styles.dialog_ava_block}>\r\n                    <img src={dialogAva}/>\r\n                </div>\r\n                <div className={styles.dialog_description_block}>\r\n                    <div className={styles.dialog_name}>\r\n                        {props.name} {props.lastName}\r\n                    </div>\r\n                    <div className={styles.dialog_last_data}>\r\n                        {props.lastData}\r\n                    </div>\r\n                    <div className={styles.dialog_description}>\r\n                        <p>\r\n                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Culpa, velit?\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"message_wrapper\":\"Message_message_wrapper__qaUCR\",\"message_ava_block\":\"Message_message_ava_block__Lt8ny\",\"radius\":\"Message_radius__qU+la\",\"message_description_block\":\"Message_message_description_block__rXXnk\",\"message_name\":\"Message_message_name__L++Li\",\"message_last_data\":\"Message_message_last_data__QnD7X\",\"message_description\":\"Message_message_description__UKlnG\"};","import React from 'react';\r\nimport styles from './Message.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport dialogAva from '../../../../asets/user_logo.png';\r\n\r\nexport type MessageType = {\r\n    name:string;\r\n    lastName:string;\r\n    lastData:string;\r\n    id:number;\r\n    message: string;\r\n}\r\n\r\nexport const Message = (props:MessageType) => {\r\n    return (\r\n        <NavLink to={'/dialogs/'+props.id}>\r\n            <div className={styles.message_wrapper}>\r\n                <div className={styles.message_ava_block}>\r\n                   <img src={dialogAva}/>\r\n                </div>\r\n                <div className={styles.radius}>\r\n\r\n                </div>\r\n                <div className={styles.message_description_block}>\r\n                    <div className={styles.message_name}>\r\n                        {props.name} {props.lastName}\r\n                    </div>\r\n                    <div className={styles.message_last_data}>\r\n                        {props.lastData}\r\n                    </div>\r\n                    <div className={styles.message_description}>\r\n                        <p>\r\n                            {props.message}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n\r\n    );\r\n};\r\n","import React, {ComponentType} from 'react';\r\nimport {sendMessage, updateNewMessageText} from '../../../redux/dialogsReducer';\r\nimport {StateType} from '../../../redux/redux-store';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {DialogType} from './Dialog/Dialog';\r\nimport {MessageType} from './Message/Message';\r\nimport {wIthAuthRedirect} from '../../HOK/WIthAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType ={\r\n    newMessageText:string\r\n    dialogs:Array<DialogType>\r\n    messages:Array<MessageType>\r\n    isAuth:boolean\r\n}\r\n\r\nconst mapStateToProps = (state:StateType):MapStateToPropsType=>{\r\n    return{\r\n        newMessageText:state.dialogsPage.newMessageText,\r\n        dialogs:state.dialogsPage.dialogs,\r\n        messages:state.dialogsPage.messages,\r\n        isAuth:state.auth.isAuth\r\n    }\r\n};\r\n\r\n const DialogsContainer =  compose<ComponentType> (\r\n    wIthAuthRedirect,\r\n    connect(mapStateToProps, {sendMessage,updateNewMessageText})\r\n)(Dialogs);\r\n\r\nexport default DialogsContainer;","import React, {ChangeEvent} from 'react';\r\nimport styles from './Dialogs.module.css';\r\nimport {Dialog, DialogType} from './Dialog/Dialog';\r\nimport {Message, MessageType} from './Message/Message';\r\nimport {Button} from '../../common/Button/Button';\r\nimport {updateNewMessageText} from '../../../redux/dialogsReducer';\r\n\r\n\r\ntype DialogsPropsType = {\r\n    sendMessage:()=>void\r\n    updateNewMessageText:(messageText:string)=>void\r\n    newMessageText:string\r\n    dialogs:Array<DialogType>\r\n    messages:Array<MessageType>\r\n    isAuth:boolean\r\n}\r\n\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const onMessageChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n            props.updateNewMessageText(e.currentTarget.value);\r\n\r\n    }\r\n    const sendMessage = () => {\r\n        props.sendMessage();\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dialogs_wrapper}>\r\n            <div className={styles.dialogs_description}>\r\n                <h2 className={styles.dialogs_title}>Dialogs:</h2>\r\n\r\n                <input value={undefined}\r\n                        onChange={()=>{}}\r\n                        placeholder=\"search dialogs...\"/>\r\n                <Button title={'Search dialog'} callback={()=>{}} className={styles.search_dialog_button}/>\r\n            </div>\r\n            <div className={styles.dialogs_container}>\r\n                {\r\n                    props.dialogs.map(dialog => <Dialog\r\n                        key={dialog.id}\r\n                        id={dialog.id} name={dialog.name}\r\n                        lastName={dialog.lastName}\r\n                        lastData={dialog.lastData}/>)}\r\n            </div>\r\n            <div className={styles.messages_container}>\r\n                <div className={styles.messages_description}>\r\n                    <input className={styles.messages_input}\r\n                           value={props.newMessageText}\r\n                           onChange={onMessageChange}\r\n                        placeholder=\"send message...\"/>\r\n                    <Button title={'Send message'} callback={sendMessage} className={styles.send_message_button}/>\r\n                </div>\r\n\r\n                {\r\n                    props.messages.map(message => <Message\r\n                        key={message.id}\r\n                        name={message.name}\r\n                        lastName={message.lastName} lastData={message.lastData}\r\n                        id={message.id} message={message.message} />\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"],"names":["Dialog","props","to","id","activeClassName","styles","className","src","dialogAva","name","lastName","lastData","Message","message","compose","wIthAuthRedirect","connect","state","newMessageText","dialogsPage","dialogs","messages","isAuth","auth","sendMessage","updateNewMessageText","value","undefined","onChange","placeholder","Button","title","callback","map","dialog","e","currentTarget"],"sourceRoot":""}